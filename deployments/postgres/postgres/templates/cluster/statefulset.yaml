apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "postgres.fullname" . }}-repmgr-node
  labels:
    type: cluster
    system: {{ .Values.cluster.name }}
    # {{- include "postgres.labels" . | nindent 4 }}
spec:
  updateStrategy: 
    type: RollingUpdate
  serviceName: {{ include "postgres.fullname" . }}
  {{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.cluster.replicaCount }}
  {{- end }}
  selector:
    matchLabels:
      {{- include "postgres.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        type: cluster
        system: {{ .Values.cluster.name }}
        # {{- include "postgres.selectorLabels" . | nindent 8 }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "postgres.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.cluster.image.repository }}:{{ .Values.cluster.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.cluster.image.pullPolicy }}
          ports:
            - name: http
              containerPort: 80
              protocol: TCP
          # readinessProbe:
          #   exec:
          #     command: ["PGPASSWORD=$POSTGRES_PASSWORD", "psql", "-U", "postgres", "-d", "my-db", "-c", "SELECT 1"]
          #   initialDelaySeconds: 15
          #   timeoutSeconds: 2
          # livenessProbe:
          #   exec:
          #     command: ["PGPASSWORD=$POSTGRES_PASSWORD", "psql", "-U", "postgres", "-d", "my-db", "-c", "SELECT 1"]
          #   initialDelaySeconds: 45
          #   timeoutSeconds: 2
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          env:
            - name: MY_POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: "REPLICATION_PRIMARY_HOST"
              value: "{{ include "postgres.fullname" . }}-repmgr-0.{{ include "postgres.fullname" . }}-db"
            - name: "PARTNER_NODES"
              value: "{{ range $i, $e := .Values.cluster.nodes }}{{ if $i }},{{ end }}{{ $.Values.cluster.name }}-repmgr-node-{{ $i }}.postgres.pod.cluster.local{{ end }}"
            - name: "NODE_NAME"
              value: "$(MY_POD_NAME)"
            - name: "CLUSTER_NODE_NETWORK_NAME"
              value: "$(MY_POD_NAME).{{ include "postgres.fullname" . }}-db"
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ include "postgres.fullname" . }}-credentials
                  key: app.db.password
            - name: POSTGRES_USER
              valueFrom:
                secretKeyRef:
                  name: {{ include "postgres.fullname" . }}-credentials
                  key: app.db.user
            - name: PGDATA
              value: /var/lib/postgresql/data/pgdata
          {{- if .Values.persistence.enabled }}
          volumeMounts:
            - name: pgdata
              mountPath: /var/lib/postgresql/data
          {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
  {{- if .Values.persistence.enabled }}
  volumeClaimTemplates:
    - metadata:
        name: pgdata
      spec:
        accessModes: [ "ReadWriteOnce" ]
        resources:
          requests:
            storage: 1Gi
  {{- end }}
